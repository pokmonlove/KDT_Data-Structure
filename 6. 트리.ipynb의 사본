{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPldE7O+6avXbpO+VKim99L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **1. 트리**\n","\n","* Node와 Branch를 이용해 사이클을 이루지 않도록 구성한 데이터 구조\n","\n","* 트리 중 이진트리 (binary tree) 형태의 구조로 탐색(검색) 알고리즘 구현을 위해 많이 사용됨\n"],"metadata":{"id":"ywqPsKqQB7yB"}},{"cell_type":"markdown","source":["# **2. 알아둘 용어**\n","* Node: 트리에서 데이터를 저장하는 기본 요소\n","(데이터와 다른 연결된 노드에 대한 Branch 정보를 포함)\n","\n","* Root Node: 트리 맨 위에 있는 노드\n","* Level: 최상위 노드를 레벨 0으로 했을 때\n","하위 Branch로 연결된 노드의 깊이를 나타낸다\n","* Parent Node: 어떤 노드의 상위 레벨에 연결괸 노드\n","* Child Node: 어떤 노드의 하위 레벨에 연결된 노드\n","* Leaf Node: Child Node가 하나도 없는 노드\n","* Sibling Node: 동일 Parent Node를 가진 노드"],"metadata":{"id":"wD-ZltiZCySC"}},{"cell_type":"markdown","source":["# **3. 이진 트리와 이진 탐색 트리**\n","* 이진 트리: 노드의 최대 Branch가 2개인 트리\n","* 이진 탐색 트리: 이진 트리에 아래와 같은 조건이 추가된 트리\n","  * 조건: 왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 해당 노드보다 큰 값을 가짐\n","     4\n","  3   5\n","\n","  <center><img src=\"https://www.mathwarehouse.com/programming/images/binary-search-tree/binary-search-tree-insertion-animation.gif\">\n","  </center>"],"metadata":{"id":"ZxN-B61mEIw8"}},{"cell_type":"markdown","source":["# **4. 자료 구조 이진 탐색 트리의 장점과 주요 용도**\n","* 주요 용도: 데이터 검색(탐색)\n","* 장점: 탐색 속도를 개선할 수 있음\n","\n","<center><img src=\"https://www.mathwarehouse.com/programming/images/binary-search-tree/binary-search-tree-sorted-array-animation.gif\"></center>"],"metadata":{"id":"YmrTtyfHFUfJ"}},{"cell_type":"code","source":[],"metadata":{"id":"R8t1po61EIka"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **5. 파이썬 객체 지향 프로그래밍으로 이진 탐색 트리 구현**"],"metadata":{"id":"mtEYD_T9F6DW"}},{"cell_type":"markdown","source":["10월 17일"],"metadata":{"id":"pTB7WqySE3WS"}},{"cell_type":"code","source":["#노드 클래스 만들기\n","class Node:\n","  def __init__(self, value):\n","    self.value=value\n","    self.left=None\n","    self.right=None"],"metadata":{"id":"wFxq8pgKEDpO","executionInfo":{"status":"ok","timestamp":1729128509330,"user_tz":-540,"elapsed":355,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# 이진 탐색 트리 조건에 부합하게 데이터를 넣어야 함\n","# 중복 데이터를 넣지 않음\n","class NodeMgmt:\n","  def __init__(self, head):\n","    self.head=head\n","\n","class NodeMgmt:\n","    def __init__(self, head):\n","        self.head = head\n","    def insert(self, value):\n","        self.current_node = self.head\n","        while True:\n","            if value < self.current_node.value:\n","                if self.current_node.left != None:\n","                    self.current_node = self.current_node.left\n","                else:\n","                    self.current_node.left = Node(value)\n","                    break\n","            else:\n","                if self.current_node.right != None:\n","                    self.current_node = self.current_node.right\n","                else:\n","                    self.current_node.right = Node(value)\n","                    break"],"metadata":{"id":"W8MQ6tstGPza","executionInfo":{"status":"ok","timestamp":1729128510551,"user_tz":-540,"elapsed":2,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["head = Node(10)\n","BST = NodeMgmt(head)"],"metadata":{"id":"j5aL23RmC8XM","executionInfo":{"status":"ok","timestamp":1729128511495,"user_tz":-540,"elapsed":530,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["BST.insert(4)\n","BST.insert(9)\n","BST.insert(13)\n","BST.insert(11)"],"metadata":{"id":"2QbJShVqE-5W","executionInfo":{"status":"ok","timestamp":1729128512981,"user_tz":-540,"elapsed":405,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"NTiinPOMF1F6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 문제 1\n","* 이진 탐색 트리의 탐색 메서드를 만들어 보자\n","* 단 결과는 bool 타입으로 반환\n","\n","```\n","def search(self,value):\n","  pass\n","````"],"metadata":{"id":"L8du15DoF1sa"}},{"cell_type":"code","source":["#노드 클래스 만들기\n","class Node:\n","  def __init__(self, value):\n","    self.value=value\n","    self.left=None\n","    self.right=None"],"metadata":{"id":"2fLP-vvRHsj1","executionInfo":{"status":"ok","timestamp":1729129081048,"user_tz":-540,"elapsed":368,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# 이진 탐색 트리 조건에 부합하게 데이터를 넣어야 함\n","# 중복 데이터를 넣지 않음\n","class NodeMgmt:\n","  def __init__(self, head):\n","    self.head=head\n","\n","class NodeMgmt:\n","    def __init__(self, head):\n","        self.head = head\n","    def insert(self, value):\n","        self.current_node = self.head\n","        while True:\n","            if value < self.current_node.value:\n","                if self.current_node.left != None:\n","                    self.current_node = self.current_node.left\n","                else:\n","                    self.current_node.left = Node(value)\n","                    break\n","            else:\n","                if self.current_node.right != None:\n","                    self.current_node = self.current_node.right\n","                else:\n","                    self.current_node.right = Node(value)\n","                    break\n","\n","    def search(self,value):\n","      self.current_node = self.head\n","      while self.current_node:\n","            if self.current_node.value == value:\n","              return True\n","            elif value < self.current_node.value:\n","              self.current_node = self.current_node.left #왼쪽으로 가라\n","            else:\n","              self.current_node = self.current_node.right #오른쪽으로 가라\n","      return False #못 찾은 경우"],"metadata":{"id":"aish5EUjF_Rq","executionInfo":{"status":"ok","timestamp":1729129682482,"user_tz":-540,"elapsed":339,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["head = Node(10)\n","BST = NodeMgmt(head)"],"metadata":{"id":"a4Nc62mwHutK","executionInfo":{"status":"ok","timestamp":1729129684200,"user_tz":-540,"elapsed":334,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["BST.insert(4)\n","BST.insert(9)\n","BST.insert(13)\n","BST.insert(11)"],"metadata":{"id":"sGVr7cikHvW6","executionInfo":{"status":"ok","timestamp":1729129685083,"user_tz":-540,"elapsed":513,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["print(BST.search(4))\n","print(BST.search(100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SbxsO8izHcET","executionInfo":{"status":"ok","timestamp":1729129770468,"user_tz":-540,"elapsed":530,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"3d1df47e-604e-4eef-ebcf-9c75cc61d09f"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","False\n"]}]},{"cell_type":"code","source":["## 이진 탐색 트리 삭제\n","# 자식이 없는 리프 노드 삭제가 가장 쉽다\n","# Leaf Node 삭제\n"],"metadata":{"id":"hVWgvMoDKf_M"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 5-1. 이진 탐색 트리 삭제\n","\n","1. Leaf Node 삭제\n","  * 자식이 없는 리프 노드 삭제가 가장 쉽다\n","  * 삭제할 Node의 Parent Node가 Node를 가리키지 않도록 함\n"],"metadata":{"id":"lJzp7BfBKxul"}},{"cell_type":"code","source":["#노드 클래스 만들기\n","class Node:\n","  def __init__(self, value):\n","    self.value=value\n","    self.left=None\n","    self.right=None"],"metadata":{"id":"byMPq0jhN7nl","executionInfo":{"status":"ok","timestamp":1729130907555,"user_tz":-540,"elapsed":2,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":79,"outputs":[]},{"cell_type":"code","source":["class NodeMgmt:\n","    def __init__(self, head):\n","        self.head = head\n","    def insert(self, value):\n","        self.current_node = self.head\n","        while True:\n","            if value < self.current_node.value:\n","                if self.current_node.left != None:\n","                    self.current_node = self.current_node.left\n","                else:\n","                    self.current_node.left = Node(value)\n","                    break\n","            else:\n","                if self.current_node.right != None:\n","                    self.current_node = self.current_node.right\n","                else:\n","                    self.current_node.right = Node(value)\n","                    break\n","\n","    def search(self,value):\n","      self.current_node = self.head\n","      while self.current_node:\n","            if self.current_node.value == value:\n","              return True\n","            elif value < self.current_node.value:\n","              self.current_node = self.current_node.left #왼쪽으로 가라\n","            else:\n","              self.current_node = self.current_node.right #오른쪽으로 가라\n","      return False #못 찾은 경우\n","\n","\n","    def delete(self, value):\n","      searched= False # 못 찾음\n","      self.current_node = self.head\n","      self.parent = self.head #\n","\n","      while self.current_node:\n","        if self.current_node.value == value:\n","          searched=True\n","        elif value < self.current_node.value: #지우고자 하는 값이 현재 값보다 클 때\n","          self.parent=self.current_node\n","          self.current_node= self.current_node.left  #왼쪽 다리가 현재 노드가 된다\n","        else:\n","          self.parent=self.current_node\n","          self.current_node= self.current_node.right #오른쪽 다리가 현재 노드가 된다\n","      if searched == False:\n","        return False # 못 찾음, 지울 게 없음\n","\n","      # Leaf Node일 경우\n","      if self.current_node.left == None and self.current_node.right == None: #리프노드\n","          if value < self.parent.value: #\n","            self.parent.left=None\n","          else:\n","            self.parent.right=None\n","          return True\n","\n","\n","      # 중간 노드일 경우\n","      elif\n","      if self.current_node.left != None and self.current_node.right == None:\n","        temp=self.current_node.left\n","        self.parent.left=None\n","        self.parent.left=temp\n","\n","      elif self.current_node.left == None and self.current_node.right != None:\n","        temp=self.current_node.right\n","        self.parent.right=None\n","        self.parent.right=temp"],"metadata":{"id":"-vADyo6YKw4p","executionInfo":{"status":"ok","timestamp":1729132909047,"user_tz":-540,"elapsed":355,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":139,"outputs":[]},{"cell_type":"code","source":["# chile node가 하나인 Node를 삭제\n","# 삭제할 node의 parent node가 삭제할 node의 child node를 가리키게 함"],"metadata":{"id":"iESYPkTNTMEA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#노드 클래스 만들기\n","class Node:\n","  def __init__(self, value):\n","    self.value=value\n","    self.left=None\n","    self.right=None"],"metadata":{"id":"IxKX2K8BZ8hp","executionInfo":{"status":"ok","timestamp":1729133795371,"user_tz":-540,"elapsed":3,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":140,"outputs":[]},{"cell_type":"code","source":["class NodeMgmt:\n","    def __init__(self, head):\n","        self.head = head\n","    def insert(self, value):\n","        self.current_node = self.head\n","        while True:\n","            if value < self.current_node.value:\n","                if self.current_node.left != None:\n","                    self.current_node = self.current_node.left\n","                else:\n","                    self.current_node.left = Node(value)\n","                    break\n","            else:\n","                if self.current_node.right != None:\n","                    self.current_node = self.current_node.right\n","                else:\n","                    self.current_node.right = Node(value)\n","                    break\n","\n","    def search(self,value):\n","      self.current_node = self.head\n","      while self.current_node:\n","            if self.current_node.value == value:\n","              return True\n","            elif value < self.current_node.value:\n","              self.current_node = self.current_node.left #왼쪽으로 가라\n","            else:\n","              self.current_node = self.current_node.right #오른쪽으로 가라\n","      return False #못 찾은 경우\n","\n","\n","    def delete(self, value):\n","      searched= False # 못 찾음\n","      self.current_node = self.head\n","      self.parent = self.head #\n","\n","      while self.current_node:\n","        if self.current_node.value == value:\n","          searched=True\n","          break\n","        elif value < self.current_node.value: #지우고자 하는 값이 현재 값보다 클 때\n","          self.parent=self.current_node\n","          self.current_node= self.current_node.left  #왼쪽 다리가 현재 노드가 된다\n","        else:\n","          self.parent=self.current_node\n","          self.current_node= self.current_node.right #오른쪽 다리가 현재 노드가 된다\n","      if searched == False:\n","        return False # 못 찾음, 지울 게 없음\n","\n","      # Leaf Node일 경우\n","      if self.current_node.left == None and self.current_node.right == None: #리프노드\n","          if value < self.parent.value: #\n","            self.parent.left=None\n","          else:\n","            self.parent.right=None\n","\n","      # 중간 노드일 경우\n","      elif self.current_node.left != None and self.current_node.right == None:\n","        if value < self.parent.value:\n","          self.parent.left=self.current_node.left\n","        else:\n","          self.parent.right=self.current_node.left\n","      elif self.current_node.left == None and self.current_node.right != None:\n","        if value < self.parent.value:\n","          self.parent.left=self.current_node.right\n","        else:\n","          self.parent.right=self.current_node.right\n","      return True"],"metadata":{"id":"HHIzEHIjY5co","executionInfo":{"status":"ok","timestamp":1729133906540,"user_tz":-540,"elapsed":377,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":144,"outputs":[]},{"cell_type":"code","source":["head = Node(10)\n","BST = NodeMgmt(head)\n","BST.insert(4)\n","BST.insert(9)\n","BST.insert(13)\n","BST.insert(11)"],"metadata":{"id":"XiuraGZUNs1d","executionInfo":{"status":"ok","timestamp":1729133908405,"user_tz":-540,"elapsed":347,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":145,"outputs":[]},{"cell_type":"code","source":["BST.delete(4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pJV8ZOQpNvbx","executionInfo":{"status":"ok","timestamp":1729133912736,"user_tz":-540,"elapsed":336,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"6879423e-b789-49b6-da69-91ad2368f551"},"execution_count":147,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":147}]},{"cell_type":"code","source":["print(BST.search(4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B7me-VJHO_VH","executionInfo":{"status":"ok","timestamp":1729133917980,"user_tz":-540,"elapsed":3,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"3f33da18-1dbc-4a53-90dd-105f14b12035"},"execution_count":148,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n"]}]},{"cell_type":"code","source":["# child node가 두 개인 Node 삭제\n","# 1. 삭제할 Node의 오른쪽 자식 중 가장 작은 값을 삭제할 Node의 parent node가 가리키도록 한다\n","# 2. 삭제할 node의 왼쪽 자식 중 가장 큰 값을 삭제할 node의 parent node가 가리키도록 함"],"metadata":{"id":"9QHZbtLkfaJ4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ofn_9bgffpWk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","\n","<center><img src=\"https://i.ibb.co/Pt8xzJ2/tree-remove-2child-code-left.png\" width = 70% ></center>\n","\n","\n","<center><img src=\"https://i.ibb.co/3MYWby2/tree-remove-2child-code-right.png\n","\" width = 70%></center>"],"metadata":{"id":"8jcGNMy8gkms"}},{"cell_type":"code","source":["class NodeMgmt:\n","    def __init__(self, head):\n","        self.head = head\n","    def insert(self, value):\n","        self.current_node = self.head\n","        while True:\n","            if value < self.current_node.value:\n","                if self.current_node.left != None:\n","                    self.current_node = self.current_node.left\n","                else:\n","                    self.current_node.left = Node(value)\n","                    break\n","            else:\n","                if self.current_node.right != None:\n","                    self.current_node = self.current_node.right\n","                else:\n","                    self.current_node.right = Node(value)\n","                    break\n","\n","    def search(self,value):\n","      self.current_node = self.head\n","      while self.current_node:\n","            if self.current_node.value == value:\n","              return True\n","            elif value < self.current_node.value:\n","              self.current_node = self.current_node.left #왼쪽으로 가라\n","            else:\n","              self.current_node = self.current_node.right #오른쪽으로 가라\n","      return False #못 찾은 경우\n","\n","\n","    def delete(self, value):\n","      searched= False # 못 찾음\n","      self.current_node = self.head\n","      self.parent = self.head #\n","\n","      while self.current_node:\n","        if self.current_node.value == value:\n","          searched=True\n","          break\n","        elif value < self.current_node.value: #지우고자 하는 값이 현재 값보다 클 때\n","          self.parent=self.current_node\n","          self.current_node= self.current_node.left  #왼쪽 다리가 현재 노드가 된다\n","        else:\n","          self.parent=self.current_node\n","          self.current_node= self.current_node.right #오른쪽 다리가 현재 노드가 된다\n","      if searched == False:\n","        return False # 못 찾음, 지울 게 없음\n","\n","      # Leaf Node일 경우\n","      if self.current_node.left == None and self.current_node.right == None: #리프노드\n","          if value < self.parent.value: #\n","            self.parent.left=None\n","          else:\n","            self.parent.right=None\n","\n","      # 중간 노드일 경우\n","      # chile node가 하나인 Node를 삭제\n","      elif self.current_node.left != None and self.current_node.right == None:\n","        if value < self.parent.value:\n","          self.parent.left=self.current_node.left\n","        else:\n","          self.parent.right=self.current_node.left\n","      elif self.current_node.left == None and self.current_node.right != None:\n","        if value < self.parent.value:\n","          self.parent.left=self.current_node.right\n","        else:\n","          self.parent.right=self.current_node.right\n","\n","\n","      # chile node가 두 개인 Node를 삭제\n","      # 1. 삭제할 Node의 오른쪽 자식 중 가장 작은 값을 삭제할 Node의 parent node가 가리키도록 한다\n","      elif self.current_node.left != None and self.current_node.right != None:\n","        if value < self.parent.value: #부모보다 작을 때\n","          self.change_node= self.curent_node.right\n","          self.change_node_parent= self.curent_node.right\n","          while self.change_node.left != None:\n","            self.change_node_parent=self.change_node\n","            self.change_node=self.change_node.left\n","          if self.change_node.right!= None:\n","            self.change_node_parent.left=self.change_node.right\n","          else:\n","            self.change_node_parent.left=None\n","          self.parent.left = self.change_node\n","          self.change_node.right = self.current_node.right\n","          self.change_node.left = self.current_node.left\n","\n","        else:  #부모보다 클 때\n","          self.change_node= self.curent_node.right\n","          self.change_node_parent= self.curent_node.right\n","          while self.change_node.left != None:\n","            self.change_node_parent=self.change_node\n","            self.change_node=self.change_node.left\n","          if self.change_node.right!= None:\n","            self.change_node_parent.left=self.change_node.right\n","          else:\n","            self.change_node_parent.left=None\n","          self.parent.right = self.change_node\n","          self.change_node.right = self.current_node.right\n","          self.change_node.left = self.current_node.left\n","\n","      return True"],"metadata":{"id":"tLun7CD-gox1","executionInfo":{"status":"ok","timestamp":1729142705071,"user_tz":-540,"elapsed":350,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":149,"outputs":[]},{"cell_type":"code","source":["import random\n","bst_nums=set()\n","while len(bst_nums) !=100:\n","  value=random.randint(0,999)\n","  if value!=500:\n","    bst_nums.add(value)"],"metadata":{"id":"ZctQVdsT7_PR","executionInfo":{"status":"ok","timestamp":1729142932392,"user_tz":-540,"elapsed":342,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":153,"outputs":[]},{"cell_type":"code","source":["bst_nums"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2egzleju8CXC","executionInfo":{"status":"ok","timestamp":1729142936708,"user_tz":-540,"elapsed":337,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"608b3303-abcf-4d6c-8c75-7224e5749db3"},"execution_count":154,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{6,\n"," 8,\n"," 23,\n"," 33,\n"," 48,\n"," 58,\n"," 72,\n"," 74,\n"," 83,\n"," 113,\n"," 141,\n"," 144,\n"," 176,\n"," 181,\n"," 190,\n"," 199,\n"," 201,\n"," 228,\n"," 234,\n"," 237,\n"," 247,\n"," 260,\n"," 261,\n"," 276,\n"," 301,\n"," 302,\n"," 309,\n"," 317,\n"," 353,\n"," 354,\n"," 376,\n"," 401,\n"," 412,\n"," 419,\n"," 424,\n"," 426,\n"," 433,\n"," 447,\n"," 454,\n"," 457,\n"," 471,\n"," 474,\n"," 483,\n"," 492,\n"," 495,\n"," 496,\n"," 502,\n"," 503,\n"," 511,\n"," 540,\n"," 543,\n"," 550,\n"," 554,\n"," 571,\n"," 573,\n"," 574,\n"," 581,\n"," 583,\n"," 604,\n"," 613,\n"," 631,\n"," 656,\n"," 660,\n"," 662,\n"," 672,\n"," 682,\n"," 708,\n"," 709,\n"," 739,\n"," 742,\n"," 746,\n"," 753,\n"," 754,\n"," 769,\n"," 774,\n"," 776,\n"," 778,\n"," 811,\n"," 817,\n"," 831,\n"," 834,\n"," 835,\n"," 836,\n"," 839,\n"," 840,\n"," 853,\n"," 854,\n"," 857,\n"," 865,\n"," 876,\n"," 916,\n"," 922,\n"," 934,\n"," 946,\n"," 959,\n"," 966,\n"," 973,\n"," 977,\n"," 983,\n"," 991}"]},"metadata":{},"execution_count":154}]},{"cell_type":"code","source":["head=Node(500)\n","binarytree=NodeMgmt(head)\n","for num in bst_nums:\n","  binarytree.insert(num)"],"metadata":{"id":"Ev-p04dJ8kqG","executionInfo":{"status":"ok","timestamp":1729142938552,"user_tz":-540,"elapsed":2,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":155,"outputs":[]},{"cell_type":"code","source":["for num in bst_nums:\n","  if binarytree.search(num) == False:\n","    print('검색 실패', num)\n",""],"metadata":{"id":"V74CQsZU828t","executionInfo":{"status":"ok","timestamp":1729142993781,"user_tz":-540,"elapsed":355,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":156,"outputs":[]},{"cell_type":"code","source":["delete_nums=set()\n","bst_nums=list(bst_nums)\n","while len(delete_nums) !=10:\n","  delete_nums.add(bst_nums[random.randint(0, 99)])\n","print(delete_nums)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Yw4PRB89Muv","executionInfo":{"status":"ok","timestamp":1729143125106,"user_tz":-540,"elapsed":354,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"7a1096d3-e270-4386-ec4c-4808ac981672"},"execution_count":158,"outputs":[{"output_type":"stream","name":"stdout","text":["{672, 708, 934, 811, 496, 401, 817, 631, 857, 922}\n"]}]},{"cell_type":"code","source":["for del_num in delete_nums:\n","  if binarytree.delete(del_num) == False:\n","    print('삭제 실패', del_num)\n","  else:\n","    print('삭제 성공', del_num)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LOGm80BU9jrH","executionInfo":{"status":"ok","timestamp":1729143194119,"user_tz":-540,"elapsed":341,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"fac09449-573f-4718-d07b-1e9face3b0f6"},"execution_count":159,"outputs":[{"output_type":"stream","name":"stdout","text":["삭제 성공 672\n","삭제 성공 708\n","삭제 성공 934\n","삭제 성공 811\n","삭제 성공 496\n","삭제 성공 401\n","삭제 성공 817\n","삭제 성공 631\n","삭제 성공 857\n","삭제 성공 922\n"]}]},{"cell_type":"code","source":["binarytree.search(11)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nV8NFQhj-Njy","executionInfo":{"status":"ok","timestamp":1729143318958,"user_tz":-540,"elapsed":336,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"22309f6b-c07f-44a0-d56c-08c9856fc04e"},"execution_count":162,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":162}]},{"cell_type":"code","source":["print(binarytree.delete(11))"],"metadata":{"id":"78iyZqoG-VN0","executionInfo":{"status":"ok","timestamp":1729143348684,"user_tz":-540,"elapsed":377,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"5712cfc0-686d-4486-f2f6-b26a9e6c26af","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":164,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n"]}]}]}