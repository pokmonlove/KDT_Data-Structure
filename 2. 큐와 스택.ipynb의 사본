{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMyQ3lJQVUSwyT8MCRSQmUk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **1. 큐의 구조**\n","\n","* 가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조\n","* 줄을 서는 행위와 유사\n","* FIFO (First-in, First-out)\n","* [Visualgo](https://visualgo.net/en/list)"],"metadata":{"id":"k9IUuG-0y8XT"}},{"cell_type":"markdown","source":["###1-1. 큐의 용어\n","* Enqueue: 큐의 데이터를 넣는 기능\n","* Dequeue: 큐에 데이터를 꺼내는 기능\n"],"metadata":{"id":"rerX9-sT0Cqf"}},{"cell_type":"markdown","source":["### 1-2. 큐의 사용\n","* 푸시메시지 순서대로 발송\n","* 멀티태스킹을 위한 프로세스 스케쥴링 방식을 구현(운영체제)"],"metadata":{"id":"NX5PfI5Q0NMk"}},{"cell_type":"markdown","source":["### 1-3. 파이썬 queue 라이브러리를 활용해 queue 자료구조를 사용\n","* Queue(): 가장 일반적인 큐 자료구조를 생성\n","* LifoQueue(): 나중에 입력된 데이터가 먼저 출력되는 구조의 큐 자료구조를 생성 (스택 구조와 비슷함)\n","* PriorityQueue(): 데이터마다 우선순위를 넣어 우선순위가 높은 순으로 데이터 출력"],"metadata":{"id":"gJgwgCfZ06iq"}},{"cell_type":"code","source":["import queue"],"metadata":{"id":"DKRDKdN8159C","executionInfo":{"status":"ok","timestamp":1728956586462,"user_tz":-540,"elapsed":412,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["data_queue=queue.Queue()\n","data_queue.put('hello') #Enqueue\n","data_queue.put('python')\n","data_queue.put('hello')\n","data_queue.put('world')\n","print(data_queue)\n","print(data_queue.qsize())\n","print(data_queue.get()) #Dequeue\n","print(data_queue.qsize())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZQCUXM9k17cu","executionInfo":{"status":"ok","timestamp":1728956785890,"user_tz":-540,"elapsed":409,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"85ca484c-8101-43aa-f78c-8f2821fa946b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<queue.Queue object at 0x79d45c585150>\n","4\n","hello\n","3\n"]}]},{"cell_type":"code","source":["for i in range(data_queue.qsize()):\n","  print(data_queue.get())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jlg81vvH2gYA","executionInfo":{"status":"ok","timestamp":1728956751370,"user_tz":-540,"elapsed":376,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"58fca3e6-99f9-47e9-8fb9-3ac3f5dfef57"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["python\n","hello\n","world\n"]}]},{"cell_type":"code","source":["# LifoQueue()로 큐 만들기\n","data_queue=queue.LifoQueue()\n","data_queue.put('hello') #Enqueue\n","data_queue.put('python')\n","data_queue.put('hello')\n","data_queue.put('world')\n","print(data_queue.qsize())\n","print(data_queue.get())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XcYYkHvE2urX","executionInfo":{"status":"ok","timestamp":1728956858957,"user_tz":-540,"elapsed":437,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"51f58d88-c671-4742-926c-62d8a4d7d959"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n","world\n"]}]},{"cell_type":"code","source":["#priority queue()\n","data_queue=queue.PriorityQueue()\n","data_queue.put((10,'김사과')) # 키 값이 작을수록 우선순위가 높다\n","data_queue.put((5,'반하나'))\n","data_queue.put((15,'오렌지'))\n","data_queue.put((3,'이메론'))\n","data_queue.put((8,'오채리'))\n","print(data_queue.qsize())\n","print(data_queue.get())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2Tu0rlKt3JYr","executionInfo":{"status":"ok","timestamp":1728957026898,"user_tz":-540,"elapsed":395,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"77b66452-2d55-4908-fecb-1f56e434ffe3"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","(3, '이메론')\n"]}]},{"cell_type":"code","source":["# 모듈을 사용하지 않고 Enqueue Dequeue 구현하기"],"metadata":{"id":"DHLgw1ih3o7C","executionInfo":{"status":"ok","timestamp":1728957063809,"user_tz":-540,"elapsed":391,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["### 문제 1\n","리스트 변수로 큐를 다루는 enqueue, dequeue 기능을 구현해 보자\n","```\n","queue_list=list()\n","def enqueue(data):\n","  pass\n","def dequeue():\n","  pass\n","\n","```"],"metadata":{"id":"4KgutBKM3x7_"}},{"cell_type":"code","source":["class Queue:\n","  def __init__(self):\n","    self.queue_list=list()\n","\n","  def enqueue(self, data):\n","    self.queue_list.append(data)\n","\n","  def dequeue(self):\n","    try:\n","      self.queue_list.remove(self.queue_list[0])\n","    except Exception as e:\n","      print('오류가 발생했습니다.', e)"],"metadata":{"id":"msmiQi8Q4jiS","executionInfo":{"status":"ok","timestamp":1728958254659,"user_tz":-540,"elapsed":373,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"vJvPuC0C-T_z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["myqueue=Queue()\n","myqueue.enqueue(1)\n","myqueue.enqueue(2)\n","myqueue.enqueue(3)\n","print(myqueue.queue_list)\n","myqueue.dequeue()\n","print(myqueue.queue_list)\n","myqueue.dequeue()\n","print(myqueue.queue_list)\n","myqueue.dequeue()\n","print(myqueue.queue_list)\n","myqueue.dequeue()\n","print(myqueue.queue_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"06bB-waq5xV3","executionInfo":{"status":"ok","timestamp":1728958256332,"user_tz":-540,"elapsed":482,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"abec5b67-7e6b-4426-bfad-005d20e4e712"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3]\n","[2, 3]\n","[3]\n","[]\n","예외가 발생했습니다. list index out of range\n","[]\n"]}]},{"cell_type":"code","source":["myqueue=Queue()\n","for i in range(10):\n","  myqueue.enqueue(i)\n","  print(myqueue.queue_list)\n","for i in range(10):\n","  myqueue.dequeue()\n","  print(myqueue.queue_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"okgpVn5G9jUo","executionInfo":{"status":"ok","timestamp":1728958628243,"user_tz":-540,"elapsed":3,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"5bc4744c-80e4-4aba-b1bf-31d2aa5d7808"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\n","[0, 1]\n","[0, 1, 2]\n","[0, 1, 2, 3]\n","[0, 1, 2, 3, 4]\n","[0, 1, 2, 3, 4, 5]\n","[0, 1, 2, 3, 4, 5, 6]\n","[0, 1, 2, 3, 4, 5, 6, 7]\n","[0, 1, 2, 3, 4, 5, 6, 7, 8]\n","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[2, 3, 4, 5, 6, 7, 8, 9]\n","[3, 4, 5, 6, 7, 8, 9]\n","[4, 5, 6, 7, 8, 9]\n","[5, 6, 7, 8, 9]\n","[6, 7, 8, 9]\n","[7, 8, 9]\n","[8, 9]\n","[9]\n","[]\n"]}]},{"cell_type":"markdown","source":["# **2. 스택의 구조**\n","\n","* 가장 나중에 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조\n","* 한쪽 끝에서만 자료를 넣거나 뺄 수 있는 구조\n","* LIFO (Last-in, First-out)\n","* [Visualgo](https://visualgo.net/en/list)"],"metadata":{"id":"kx0kVpkN95S2"}},{"cell_type":"markdown","source":["###2-1. 스택의 용어\n","* push: 데이터를 스택에 쌓기\n","* pop: 데이터를 스택에서 꺼내기"],"metadata":{"id":"-Dyxktfc-koF"}},{"cell_type":"markdown","source":["### 2-2. 스택의 사용\n","* 컴퓨터 내부의 프로세스 구조의 함수 동작 방식\n"],"metadata":{"id":"yiv9ABuq-3cY"}},{"cell_type":"markdown","source":["### 2-3. 큐와 스택의 장단점\n","* 장점\n","  * 구조가 단순해서 구현하기 쉬움\n","  * 데이터 저장/읽기 속도가 빠름\n","* 단점:\n","  * 데이터 최대 개수를 미리 정해야 함 > 스택: 파이썬의 경우 재귀함수는 1000번까지만 호출이 가능하다\n","  * 저장공간의 낭비 발생  > 미리 최대 개수만큼 저장공간을 확보해야 한다\n","\n","> 스택과 큐는 단순하고 빠른 성능을 위해 사용하므로 보통 배열 구조를 활용해 구현하는 것이 일반적이다"],"metadata":{"id":"Y2bfRO0x_biv"}},{"cell_type":"code","source":["# 파이썬 리스트 기능에서 제공하는 메소드로 스택 사용학\n","data_stack=list()\n","print(data_stack)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uma7zAs9AZFI","executionInfo":{"status":"ok","timestamp":1728959371774,"user_tz":-540,"elapsed":424,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"318b645a-b2e1-4265-eb30-4bf9797cb88c"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n"]}]},{"cell_type":"code","source":["data_stack.append(2)\n","data_stack.append(4)\n","data_stack.append(6)\n","data_stack.append(8)\n","print(data_stack)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_x6W-23OAgeB","executionInfo":{"status":"ok","timestamp":1728959406845,"user_tz":-540,"elapsed":381,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"52bbc7d9-bcad-46ea-9896-e481e8093f3d"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6, 8, 2, 4, 6, 8, 2, 4, 6, 8]\n"]}]},{"cell_type":"code","source":["data_stack.pop()\n","print(data_stack)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PCBaV1fuAvMZ","executionInfo":{"status":"ok","timestamp":1728959423521,"user_tz":-540,"elapsed":387,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"2dc512d7-b79a-41c6-dda6-4d1bb7389230"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6, 8, 2, 4, 6, 8, 2, 4, 6]\n"]}]},{"cell_type":"markdown","source":["### 문제 2\n","* 리스트 변수로 스택을 다루는 pop push 기능을 구현해 보자\n","* 단 리스트의 pop push 함수는 사용하지 않는다"],"metadata":{"id":"-sgPhtUSAzY9"}},{"cell_type":"code","source":["class Stack:\n","  def __init__(self):\n","    self.stack_list=list()\n","\n","  def push(self, data):\n","    self.stack_list.append(data)\n","\n","  def pop(self):\n","    try:\n","      self.stack_list.remove(self.stack_list[-1])\n","    except Exception as e:\n","      print('오류가 발생했습니다.', e)"],"metadata":{"id":"ALg2Sib9AZYB","executionInfo":{"status":"ok","timestamp":1728959609066,"user_tz":-540,"elapsed":350,"user":{"displayName":"김남희","userId":"08058861200894640253"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["mystack=Stack()\n","for i in range(10):\n","  mystack.push(i)\n","  print(mystack.stack_list)\n","for i in range(10):\n","  mystack.pop()\n","  print(mystack.stack_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oLxAAPXLBKx7","executionInfo":{"status":"ok","timestamp":1728959611051,"user_tz":-540,"elapsed":376,"user":{"displayName":"김남희","userId":"08058861200894640253"}},"outputId":"c22acba1-597d-4ec1-fab7-84910cbc93ab"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\n","[0, 1]\n","[0, 1, 2]\n","[0, 1, 2, 3]\n","[0, 1, 2, 3, 4]\n","[0, 1, 2, 3, 4, 5]\n","[0, 1, 2, 3, 4, 5, 6]\n","[0, 1, 2, 3, 4, 5, 6, 7]\n","[0, 1, 2, 3, 4, 5, 6, 7, 8]\n","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[0, 1, 2, 3, 4, 5, 6, 7, 8]\n","[0, 1, 2, 3, 4, 5, 6, 7]\n","[0, 1, 2, 3, 4, 5, 6]\n","[0, 1, 2, 3, 4, 5]\n","[0, 1, 2, 3, 4]\n","[0, 1, 2, 3]\n","[0, 1, 2]\n","[0, 1]\n","[0]\n","[]\n"]}]}]}